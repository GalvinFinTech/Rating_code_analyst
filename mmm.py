import streamlit as st
import plotly.graph_objects as go
import plotly.express as px
from vnstock import *
from PIL import Image
import ta

st.set_page_config(page_title="Stock Dashboard", page_icon="üìà", layout="wide")

# ƒê√°nh d·∫•u h√†m n√†y ƒë·ªÉ l∆∞u tr·ªØ d·ªØ li·ªáu t·∫£i l√™n trong b·ªô nh·ªõ cache
@st.cache_data
def load_data(file_path):
    df_info = pd.read_excel(file_path, sheet_name="Info")
    df_price = pd.read_excel(file_path, sheet_name="Price")
    df_volume = pd.read_excel(file_path, sheet_name="Volume")
    return df_info, df_price, df_volume
file_path = "Price-Vol VN 2015-2023.xlsx"

def load_and_clean_sheet(file_path):
    sheet = pd.read_excel(file_path, skiprows=7, skipfooter=11)
    sheet.columns = sheet.iloc[0]
    sheet = sheet.iloc[1:]
    return sheet

def filter_data(dt, industry, year):
    dt = dt.iloc[:, 1:]
    bank = dt[dt['Ng√†nh ICB - c·∫•p 4'].str.contains(industry, case=False, na=False)].copy()

    bank.index = [year] * len(bank)
    bank.reset_index(inplace=True)
    bank.rename(columns={'index': 'Year'}, inplace=True)
    for i in range(len(bank.columns)):
        quarter_info = f"\nH·ª£p nh·∫•t\nQu√Ω: H√†ng nƒÉm\nNƒÉm: {year}\n"
        if quarter_info in bank.columns[i]:
            bank.columns = bank.columns.str.replace(quarter_info, " ")
    return bank

def process_and_concat_data(years, industry):
    data_frames = [filter_data(load_and_clean_sheet(f"{year}-Vietnam.xlsx"), industry, year) for year in years]
    return pd.concat(data_frames, ignore_index=True)

def rename_columns_and_sort(df):
    df.rename(columns=lambda x: x.split('ƒê∆°n v·ªã')[0].strip(), inplace=True)
    df.columns = df.columns.str.upper()
    df.sort_values(by=["M√É", "YEAR"], inplace=True)

def process_numeric_column(df, column_name):
    df[column_name] = pd.to_numeric(df[column_name], errors='coerce')


def process_stock_data(df, code):
    mch_data = df[df['M√£'] == code].copy()
    mch_data.columns = mch_data.columns.str.split('\n').str[0]
    columns_cdkto = mch_data.filter(like='CƒêKT.').columns
    df_cdkto = mch_data[['NƒÉm'] + list(columns_cdkto)].reset_index(drop=True)
    columns_kqkd = mch_data.filter(like='KQKD.').columns
    df_kqkd = mch_data[['NƒÉm'] + list(columns_kqkd)].reset_index(drop=True)
    columns_lctt = mch_data.filter(like='LCTT.').columns
    df_lctt = mch_data[['NƒÉm'] + list(columns_lctt)].reset_index(drop=True)
    return df_cdkto, df_kqkd, df_lctt


def load_and_process_data(years, code):
    bctc = {year: load_and_clean_sheet(f'{year}-Vietnam.xlsx') for year in years}
    cdkt_dfs, kqkd_dfs, lctt_dfs = zip(*(process_stock_data(bctc[year], code) for year in years))

    df_cdkto_all = pd.concat(cdkt_dfs, ignore_index=True)
    df_kqkd_all = pd.concat(kqkd_dfs, ignore_index=True)
    df_lctt_all = pd.concat(lctt_dfs, ignore_index=True)

    for df in [df_cdkto_all, df_kqkd_all, df_lctt_all]:
        df['NƒÉm'] = df['NƒÉm'].astype(int)

    return df_cdkto_all, df_kqkd_all, df_lctt_all
years = [2018, 2019, 2020, 2021, 2022]
def prepare_data(data_dict, code):
    df_info, df_price, df_volume = data_dict
    stock_price = get_stock_data(df_price, code, "close")
    stock_volume = get_stock_data(df_volume, code, "volume")
    stock_info = df_info[df_info["Symbol"].str.contains(code, case=False, na=False)]
    return stock_info, stock_price, stock_volume
def get_stock_data(data_df, code, value_column):
    stock = data_df[data_df["Code"].astype(str).str.contains(code, case=False, na=False)]
    if stock.empty:
        return pd.DataFrame()
    stock_result = stock.melt(id_vars=["Name", "Code", "CURRENCY"], var_name="Date", value_name=value_column)
    stock_result = stock_result.dropna(subset=[value_column])
    return stock_result[["Date", value_column]]
def main():
    code = st.text_input('Enter stock code (Example: MCH):').upper()
    industry = 'Th·ª±c ph·∫©m'
    bank_bctc = process_and_concat_data(years, industry)
    rename_columns_and_sort(bank_bctc)
    process_numeric_column(bank_bctc, 'CƒêKT. V·ªêN CH·ª¶ S·ªû H·ªÆU')
    avg_von = bank_bctc.groupby('M√É')['CƒêKT. V·ªêN CH·ª¶ S·ªû H·ªÆU'].mean()
    top_10 = avg_von.nlargest(10)
    bctc = bank_bctc[bank_bctc['M√É'].isin(top_10.index)]
    params = {
        "exchangeName": "HOSE,HNX,UPCOM",
        "epsGrowth1Year": (0, 1000000),
    }
    V = stock_screening_insights(params, size=1700, drop_lang='vi')
    mch_data = V[V['ticker'] == 'MCH']
    #mch_data_reset = mch_data.reset_index(drop=True)
    with st.sidebar:
        st.sidebar.title("üìà Stock Dashboard")
        options = st.sidebar.radio('Pages', options=['Ph√¢n t√≠ch ng√†nh', 'Ph√¢n t√≠ch c·ªï phi·∫øu'])
    # T·∫°o layout c·ªôt tr√°i v√† c·ªôt ph·∫£i
    left_column, right_column = st.columns(2)
    # Hi·ªÉn th·ªã ti√™u ƒë·ªÅ v√† th√¥ng tin ·ªü c·ªôt tr√°i
    with left_column:
        st.title('MCH')
        image = Image.open('/Users/nguyenhoangvi/Downloads/·ª®ng d·ª•ng Python/Report - GPM/MCH.jpeg')
        st.image(image, caption='CTCP H√†ng ti√™u d√πng Masan')
    with right_column:
        # Display metrics in a single row
        c1, c2, c3 = st.columns(3)
        with c1:
            st.markdown('V·ªën ho√°')
            mar = mch_data.at[mch_data.index[0], 'marketCap']
            st.subheader(mar)
        with c2:
            st.markdown('Beta')
            beta = mch_data.at[mch_data.index[0], 'beta']
            st.subheader(beta)
        with c3:
            st.markdown('EPS')
            eps =mch_data.at[mch_data.index[0],'eps']
            st.subheader(eps)

        # Display additional metrics in a single row
        c4, c5, c6 = st.columns(3)
        with c4:
            st.markdown('EV/Ebitda')
            ebit = mch_data.at[mch_data.index[0], 'evEbitda']
            st.subheader(ebit)
        with c5:
            st.markdown('PE')
            pe = mch_data.at[mch_data.index[0], 'pe']
            st.subheader(pe)
        with c6:
            st.markdown('PB')
            pb = mch_data.at[mch_data.index[0], 'pb']
            st.subheader(pb)

    df_info, df_price, df_volume = load_data(file_path)
    if options == 'Ph√¢n t√≠ch ng√†nh':
            phan_tich_nganh(df_info,bctc)
    elif options == 'Ph√¢n t√≠ch c·ªï phi·∫øu':
            phan_tich_cp(code,bctc)
# Trang ph√¢n t√≠ch ng√†nh
def phan_tich_nganh(df_info,bctc):
    # √Åp d·ª•ng b·ªô l·ªçc v·ªõi h√†m ƒë·ªÉ l·∫•y k·∫øt qu·∫£
    params = {
        "exchangeName": "HOSE,HNX,UPCOM",
        "epsGrowth1Year": (0, 1000000)
    }
    V = stock_screening_insights(params, size=1700, drop_lang='vi')

    a1,a2 = st.columns(2)
    with a1:
        chart_type = st.radio('Select Chart Type:', ['Treemap', 'Sunburst'])
        value_col = st.selectbox('Select Value to Plot:', ['totalTradingValue', 'marketCap'])
    with a2:
        width = st.slider('Width', min_value=200, max_value=1600, value=1000, step=100)
        height = st.slider('Height', min_value=200, max_value=1200, value=600, step=100)
    # Bi·ªÉu ƒë·ªì Treemap ho·∫∑c Sunburst t√πy thu·ªôc v√†o l·ª±a ch·ªçn t·ª´ ng∆∞·ªùi d√πng
    fig = create_chart(V, value_col, chart_type=chart_type.lower(), width=width, height=height)
    # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì trong ·ª©ng d·ª•ng Streamlit
    st.plotly_chart(fig)

    nganh = industry_analysis('MCH', lang="vi")
    d1 = preprocess_industry_data(nganh)
    d1.columns = ['M√£ CP', 'V·ªën h√≥a(t·ª∑)', 'Gi√°', 'P/B', 'ROE', 'P/E', 'ROA']
    # Ch·ªçn gi√° tr·ªã cho x v√† y t·ª´ ng∆∞·ªùi d√πng
    selected_x = st.selectbox('Ch·ªçn gi√° tr·ªã cho tr·ª•c x:', ['ROE', 'ROA'])
    selected_y = st.selectbox('Ch·ªçn gi√° tr·ªã cho tr·ª•c y:', ['P/B', 'P/E'])

    # T·∫°o bi·ªÉu ƒë·ªì d·ª±a tr√™n l·ª±a ch·ªçn c·ªßa ng∆∞·ªùi d√πng
    fig = px.scatter(
        d1, x=selected_x, y=selected_y, size="V·ªën h√≥a(t·ª∑)", text="M√£ CP",
        color="V·ªën h√≥a(t·ª∑)", color_continuous_scale="Rainbow", size_max=120,
        hover_name="M√£ CP", hover_data={selected_x: True, selected_y: True, "V·ªën h√≥a(t·ª∑)": True, "M√£ CP": False}
    )
    # Update layout
    fig.update_layout(
        title=f'So s√°nh t∆∞∆°ng quan - {selected_x} vs {selected_y}',
        xaxis=dict(title=f'{selected_x}'),
        yaxis=dict(title=f'{selected_y}'),
        showlegend=False,
        plot_bgcolor='white'
    )
    # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì
    st.plotly_chart(fig, use_container_width=True)
    st.write('So v·ªõi c√°c c·ªï phi·∫øu c√πng ng√†nh kh√°c, MCH c√≥ nh·ªØng ƒëi·ªÉm n·ªïi b·∫≠t sau:'
             '\n - MCH c√≥ hi·ªáu qu·∫£ s·ª≠ d·ª•ng v·ªën ch·ªß s·ªü h·ªØu v√† t·ªïng t√†i s·∫£n t·ªët nh·∫•t. ƒêi·ªÅu n√†y cho th·∫•y c√¥ng ty n√†y c√≥ kh·∫£ nƒÉng t·∫°o ra l·ª£i nhu·∫≠n cao t·ª´ v·ªën v√† t√†i s·∫£n c·ªßa m√¨nh.'
             '\n - MCH c√≥ ti·ªÅm nƒÉng tƒÉng tr∆∞·ªüng cao. ƒêi·ªÅu n√†y ƒë∆∞·ª£c th·ªÉ hi·ªán qua gi√° tr·ªã PE th·∫•p c·ªßa c·ªï phi·∫øu.'
             )

    col1, col2 = st.columns(2)
    with col1:
        sector_counts = df_info['Sector'].value_counts()
        color_palette = px.colors.qualitative.Light24
        fig_sector = px.bar(x=sector_counts.index, y=sector_counts.values, title='Number of Stocks by Sector',
                            color_discrete_sequence=color_palette)
        st.plotly_chart(fig_sector, use_container_width=True)

    with col2:
        exchange_counts = df_info['Exchange'].value_counts()
        fig_exchange = go.Figure([go.Pie(labels=exchange_counts.index, values=exchange_counts.values)])
        fig_exchange.update_layout(title='Number of Stocks by Exchange')
        st.plotly_chart(fig_exchange, use_container_width=True)
#Trang ph√¢n t√≠ch c·ªï phi·∫øu
def phan_tich_cp(code,bctc):
    #code = st.text_input('Enter stock code (Example: MCH):').upper()
    data_dict = load_data(file_path)
    stock_info, stock_price, stock_volume = prepare_data(data_dict, code)
    merged_df = pd.concat([stock_price.set_index('Date'), stock_volume.set_index('Date')], axis=1)
    df = merged_df.reset_index()
    df['Date'] = pd.to_datetime(df['Date'])
    df_cdkto, df_kqkd, df_lctt = load_and_process_data(years, code)

    st.markdown('### Time Series Analysis')
    left_column, right_column = st.columns((7, 3))
    with right_column:
        st.write('')
    with left_column:
        fig = go.Figure()
        fig.add_trace(go.Scatter(x=df['Date'], y=df['close'],
                                 mode='lines',
                                 name='Close Price',
                                 line=dict(color='blue', width=2)))  # T√πy ch·ªânh m√†u s·∫Øc v√† ƒë·ªô r·ªông ƒë∆∞·ªùng

        fig.update_layout(
            xaxis_title='Date',
            yaxis_title='Close Price',
            hovermode='x unified',
            showlegend=True)

        colors = ['red' if df['close'].iloc[i] > df['close'].iloc[i - 1] else 'green' for i in range(1, len(df))]

        fig.add_trace(go.Bar(x=df['Date'].iloc[1:], y=df['volume'].iloc[1:],
                             name='Volume',
                             yaxis='y2',
                             marker=dict(color=colors),
                             hovertemplate='</b>: %{y}k'))  # T√πy ch·ªânh m·∫´u hovertemplate

        # T√πy ch·ªânh bi·ªÉu ƒë·ªì cho tr·ª•c y th·ª© hai
        fig.update_layout(yaxis2=dict(title='Volume', overlaying='y', side='right'))

        # Th√™m thanh tr∆∞·ª£t th·ªùi gian v√† n√∫t ch·ªçn kho·∫£ng th·ªùi gian
        fig.update_xaxes(title_text='Date', rangeslider_visible=False, rangeselector=dict(
            buttons=[
                dict(count=1, label="1m", step="month", stepmode="backward"),
                dict(count=3, label="3m", step="month", stepmode="backward"),
                dict(count=6, label="6m", step="month", stepmode="backward"),
                dict(count=1, label="YTD", step="year", stepmode="todate"),
                dict(count=1, label="1y", step="year", stepmode="backward"),
                dict(count=5, label="5y", step="year", stepmode="backward"),
                dict(step="all")
            ]
        ))

        # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì
        st.plotly_chart(fig, use_container_width=True)

    t1,t2,t3,t4,t5,t6 = st.tabs(["T·ªïng quan",'Ph√¢n t√≠ch 360','Ph√¢n t√≠ch kƒ© thu·∫≠t','T√†i ch√≠nh','H·ªì s∆°','C·ªï ƒë√¥ng'])
    # Retrieve data based on the stock symbol
    with t1:
        data = general_rating(code)
        data.columns = ['ƒê√°nh gi√° C·ªï phi·∫øu', 'ƒê·ªãnh gi√°', 'S·ª©c kh·ªèe t√†i ch√≠nh', 'M√¥ h√¨nh kinh doanh',
                        'Hi·ªáu qu·∫£ ho·∫°t ƒë·ªông', 'ƒêi·ªÉm RS', 'ƒêi·ªÉm TA', 'M√£ c·ªï phi·∫øu', 'Gi√° cao nh·∫•t',
                        'Gi√° th·∫•p nh·∫•t', 'Thay ƒë·ªïi gi√° 3 th√°ng', 'Thay ƒë·ªïi gi√° 1 nƒÉm', 'Beta', 'Alpha']
        # Melt DataFrame to have a 'criteria' column
        df_melted = pd.melt(data, id_vars=['M√£ c·ªï phi·∫øu'],
                            value_vars=['ƒê·ªãnh gi√°', 'S·ª©c kh·ªèe t√†i ch√≠nh', 'M√¥ h√¨nh kinh doanh',
                                        'Hi·ªáu qu·∫£ ho·∫°t ƒë·ªông', 'ƒêi·ªÉm RS'])
        # Create Radar Chart with Plotly Express
        fig = px.line_polar(df_melted, r='value', theta='variable', line_close=True, color='M√£ c·ªï phi·∫øu',
                            labels={'variable': 'Ti√™u ch√≠', 'value': 'ƒêi·ªÉm'},
                            title='Bi·ªÉu ƒë·ªì Radar - Ti√™u ch√≠ ƒê√°nh gi√° C·ªï phi·∫øu',
                            height=600, width=1000,
                            color_discrete_sequence=px.colors.qualitative.Dark2
                            )
        # Customizing Radar Chart with Plotly Graph Objects
        fig.update_traces(fill='toself', hoverinfo='all', hovertemplate='%{r:.2f}',fillcolor='rgba(0, 200, 0, 0.5)')


        # Add highlighting at all highest points
        max_indices = df_melted.loc[df_melted.groupby('variable')['value'].idxmax()]
        for idx, row in max_indices.iterrows():
            fig.add_trace(go.Scatterpolar(
                r=[row['value']],
                theta=[row['variable']],
                mode='markers',
                marker=dict(color='orange', size=6),
                showlegend=False
            ))

        # Show the chart
        fig.update_layout(polar=dict(radialaxis=dict(visible=True, range=[0, 5])), showlegend=False)
        st.plotly_chart(fig)
        ta1,ta2 = st.columns(2)
        # Example usage
        df4 = valuation_rating("MCH")
        data4 = df4[['ticker', 'valuation', 'pe', 'pb', 'ps', 'evebitda','dividendRate']]
        data4.columns = ['M√£','X·∫øp h·∫°ng ƒë·ªãnh gi√°','P/E','P/B','P/S','EV/EBITDA','T·ª∑ l·ªá c·ªï t·ª©c']

        df3 = financial_health_rating("MCH")
        data3 = df3[['ticker', 'financialHealth', 'netDebtEquity',
                    'currentRatio', 'quickRatio', 'interestCoverage', 'netDebtEBITDA']]
        data3.columns = ['M√£','S·ª©c kho·∫ª t√†i ch√≠nh','D∆∞ n·ª£ r√≤ng/V·ªën ch·ªß s·ªü h·ªØu','T·ª∑ l·ªá thanh to√°n ng·∫Øn h·∫°n',
        'T·ª∑ l·ªá thanh to√°n nhanh','Kh·∫£ nƒÉng tr·∫£ l√£i vay','D∆∞ n·ª£ r√≤ng/EBITDA']

        df2 = biz_operation_rating("MCH")
        data2 = df2[['ticker', 'avgROE', 'avgROA', 'last5yearsNetProfitGrowth',
                    'last5yearsRevenueGrowth', 'last5yearsOperatingProfitGrowth',
                    'last5yearsEBITDAGrowth', 'last5yearsFCFFGrowth',
                    'lastYearGrossProfitMargin', 'lastYearOperatingProfitMargin',
                    'lastYearNetProfitMargin']]
        data2.columns = ['M√£','ROE','ROA', 'TƒÉng tr∆∞·ªüng l·ª£i nhu·∫≠n r√≤ng 5 nƒÉm g·∫ßn nh·∫•t',
        'TƒÉng tr∆∞·ªüng doanh thu 5 nƒÉm g·∫ßn nh·∫•t', 'TƒÉng tr∆∞·ªüng l·ª£i nhu·∫≠n t·ª´ ho·∫°t ƒë·ªông kinh doanh 5 nƒÉm g·∫ßn nh·∫•t',
        'TƒÉng tr∆∞·ªüng EBITDA 5 nƒÉm g·∫ßn nh·∫•t',   'TƒÉng tr∆∞·ªüng FCFF 5 nƒÉm g·∫ßn nh·∫•t','Bi√™n l·ª£i nhu·∫≠n g·ªôp nƒÉm tr∆∞·ªõc',
        'Bi√™n l·ª£i nhu·∫≠n thu·∫ßn nƒÉm tr∆∞·ªõc',  'Bi√™n l·ª£i nhu·∫≠n ho·∫°t ƒë·ªông nƒÉm tr∆∞·ªõc']

        df1 = biz_model_rating(code)
        data1 = df1[['ticker', 'businessEfficiency', 'assetQuality', 'cashFlowQuality', 'bom', 'businessAdministration',
                'productService', 'businessAdvantage', 'companyPosition', 'industry', 'operationRisk']]
        data1.columns = ['M√£', 'Hi·ªáu su·∫•t kinh doanh', 'Ch·∫•t l∆∞·ª£ng t√†i s·∫£n', 'Ch·∫•t l∆∞·ª£ng d√≤ng ti·ªÅn', 'BOM',
        'Qu·∫£n tr·ªã kinh doanh','S·∫£n ph·∫©m/D·ªãch v·ª•',   '∆Øu th·∫ø kinh doanh','V·ªã tr√≠ c√¥ng ty', 'C√¥ng nghi·ªáp',
        'R·ªßi ro ho·∫°t ƒë·ªông']
        color_sequence1 = px.colors.qualitative.Plotly
        color_sequence2 = px.colors.qualitative.Prism
        with ta1:
            display_radar_chart(data1, 'M√¥ h√¨nh kinh doanh',color_sequence2)
            display_radar_chart(data2, 'Hi·ªáu qu·∫£ ho·∫°t ƒë·ªông',color_sequence1)
        with ta2:
            display_radar_chart(data4, 'ƒê·ªãnh gi√°',color_sequence1)
            display_radar_chart(data3, 'S·ª©c kho·∫ª t√†i ch√≠nh',color_sequence2)

    with t2:
        df_pe = stock_evaluation(symbol=code, period=5, time_window='D')
        fig_pe = create_stock_evaluation_chart(df_pe, 'PE', 'So s√°nh PE')
        df_pb = stock_evaluation(symbol=code, period=5, time_window='D')
        fig_pb = create_stock_evaluation_chart(df_pb, 'PB', 'So s√°nh PB')
        # L·ª±a ch·ªçn t·ª´ ng∆∞·ªùi d√πng ƒë·ªÉ ch·ªçn bi·ªÉu ƒë·ªì mu·ªën hi·ªÉn th·ªã
        selected_chart = st.radio('Ch·ªçn bi·ªÉu ƒë·ªì ƒë·ªÉ hi·ªÉn th·ªã', ['PE', 'PB'])
        # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì t∆∞∆°ng ·ª©ng v·ªõi l·ª±a ch·ªçn
        if selected_chart == 'PE':
            st.plotly_chart(fig_pe)
        elif selected_chart == 'PB':
            st.plotly_chart(fig_pb)
        st.write(
            'K·∫øt lu·∫≠n:',
            ' Nh√¨n chung, c√≥ th·ªÉ th·∫•y MCH ƒëang ƒë∆∞·ª£c ƒë·ªãnh gi√° th·∫•p h∆°n so v·ªõi c√°c c√¥ng ty c√πng ng√†nh v·ªÅ PE, nh∆∞ng ƒëang ƒë∆∞·ª£c ƒë·ªãnh gi√° cao h∆°n so v·ªõi c√°c c√¥ng ty c√πng ng√†nh v√† so v·ªõi th·ªã tr∆∞·ªùng v·ªÅ PB.',
            ' Nguy√™n nh√¢n c√≥ th·ªÉ l√† do MCH l√† m·ªôt c√¥ng ty m·ªõi th√†nh l·∫≠p, nh∆∞ng c√≥ t·ªëc ƒë·ªô tƒÉng tr∆∞·ªüng nhanh ch√≥ng, ti·ªÅm nƒÉng tƒÉng tr∆∞·ªüng cao v√† c√≥ th∆∞∆°ng hi·ªáu m·∫°nh.',
            ' Tuy nhi√™n, nh√† ƒë·∫ßu t∆∞ c·∫ßn c√¢n nh·∫Øc k·ªπ l∆∞·ª°ng c√°c y·∫øu t·ªë r·ªßi ro ti·ªÅm ·∫©n tr∆∞·ªõc khi quy·∫øt ƒë·ªãnh ƒë·∫ßu t∆∞ v√†o MCH, bao g·ªìm:',
            '\n -  MCH l√† m·ªôt c√¥ng ty m·ªõi th√†nh l·∫≠p, ch∆∞a c√≥ nhi·ªÅu kinh nghi·ªám.',
            '\n -  MCH ƒëang ph·∫£i ƒë·ªëi m·∫∑t v·ªõi s·ª± c·∫°nh tranh gay g·∫Øt t·ª´ c√°c c√¥ng ty c√πng ng√†nh.'
        )
        fig7 = plot_revenue_comparison(bctc)
        st.plotly_chart(fig7)
        fig8 = plot_equity(bctc)
        st.plotly_chart(fig8)
        fig9 = plot_profit_after_tax(bctc)
        st.plotly_chart(fig9)

    with t3:
        start_date = pd.to_datetime(df["Date"]).min()
        end_date = pd.to_datetime(df["Date"]).max()
        col1, col2 = st.columns((2))
        with col1:
            date1 = pd.to_datetime(st.date_input("Start Date", start_date))
            date2 = pd.to_datetime(st.date_input("End Date", end_date))
        selected_data = df[(df['Date'] >= date1) & (df['Date'] <= date2)]
        with col2:
            # User-defined indicators and windows
            available_sma_windows = ['10', '14', '20', '50', '100']
            selected_sma_windows = st.multiselect('Select SMA Windows', available_sma_windows)
            available_ema_windows = ['10', '14', '20', '50', '100', '200']
            selected_ema_windows = st.multiselect('Select EMA Windows', available_ema_windows)
            chart_type = st.selectbox("Select Chart Type", ["MACD", "RSI"])
        l, r = st.columns(2)
        with l:
            # Create figure
            fig = go.Figure()
            # Plot Close Price
            add_trace(fig, selected_data['Date'], selected_data['close'], 'Close Price', 'blue', width=2)
            # Plot selected indicators
            plot_sma(fig, selected_data, selected_sma_windows, 'orange')
            plot_ema(fig, selected_data, selected_ema_windows, 'pink')
            plot_bollinger(fig, selected_data)
            # T√πy ch·ªânh bi·ªÉu ƒë·ªì
            fig.update_layout(
                title="Stock Price with Technical Indicators",
                xaxis_title='Date',
                yaxis_title='Close Price',
                showlegend=True,
                hovermode='x unified'
            )

            colors = ['red' if selected_data['close'].iloc[i] > selected_data['close'].iloc[i - 1] else 'green' for i in
                      range(1, len(selected_data))]

            fig.add_trace(go.Bar(x=selected_data['Date'].iloc[1:], y=selected_data['volume'].iloc[1:],
                                 name='Volume',
                                 yaxis='y2',
                                 marker=dict(color=colors),
                                 hovertemplate='</b>: %{y}k'))  # T√πy ch·ªânh m·∫´u hovertemplate

            # T√πy ch·ªânh bi·ªÉu ƒë·ªì cho tr·ª•c y th·ª© hai
            fig.update_layout(yaxis2=dict(title='Volume', overlaying='y', side='right'))
            # Th√™m thanh tr∆∞·ª£t th·ªùi gian v√† n√∫t ch·ªçn kho·∫£ng th·ªùi gian
            fig.update_xaxes(title_text='Date', rangeslider_visible=False, rangeselector=dict(
                buttons=[
                    dict(count=1, label="1m", step="month", stepmode="backward"),
                    dict(count=3, label="3m", step="month", stepmode="backward"),
                    dict(count=6, label="6m", step="month", stepmode="backward"),
                    dict(count=1, label="YTD", step="year", stepmode="todate"),
                    dict(count=1, label="1y", step="year", stepmode="backward"),
                    dict(count=5, label="5y", step="year", stepmode="backward"),
                    dict(step="all")
                ]
            ))
            # Show the plot
            st.plotly_chart(fig)
        with r:
            macd_container = st.container()
            rsi_container = st.container()
            stochastic_container = st.container()
            if chart_type == "MACD":
                with macd_container:
                    plot_macd_chart(selected_data)
            elif chart_type == "RSI":
                with rsi_container:
                    st.plotly_chart(plot_rsi_chart(selected_data))

        expander = st.expander("Stock Data")
        expander.write(selected_data)

    with t4:
        fig1 = plot_accounting_balance(df_cdkto)
        st.plotly_chart(fig1)
        fig2 = plot_business_results(df_kqkd)
        st.plotly_chart(fig2)
        fig3 = plot_cash_flow(df_lctt)
        st.plotly_chart(fig3)
        fig4= plot_capital_structure(df_cdkto)
        st.plotly_chart(fig4)
        fig5 = plot_asset_structure(df_cdkto)
        st.plotly_chart(fig5)
        fig10 = plot_profit_structure(df_kqkd)
        st.plotly_chart(fig10)
        fig6 = plot_gross_profit_margin(df_kqkd)
        st.plotly_chart(fig6)




    with t5:
        co1,co2 = st.columns((6, 4))
        with co1:
            st.header('Th√¥ng tin s∆° l∆∞·ª£c v·ªÅ c·ªï phi·∫øu MCH')
            st.subheader('V·ªã th·∫ø c√¥ng ty')
            st.write(
                'C√¥ng ty C·ªï ph·∫ßn H√†ng Ti√™u D√πng MaSan (MCH) c√≥ ti·ªÅn th√¢n l√† C√¥ng ty C·ªï ph·∫ßn C√¥ng nghi·ªáp - Th∆∞∆°ng m·∫°i '
                'Masan ƒë∆∞·ª£c th√†nh l·∫≠p v√†o nƒÉm 2000. C√¥ng ty s·∫£n xu·∫•t v√† kinh doanh c√°c lo·∫°i th·ª±c ph·∫©m v√† ƒë·ªì u·ªëng '
                'bao g·ªìm n∆∞·ªõc m·∫Øm, n∆∞·ªõc t∆∞∆°ng, t∆∞∆°ng ·ªõt, m√¨ ƒÉn li·ªÅn, ch√°o ƒÉn li·ªÅn, c√† ph√™ h√≤a tan, ng≈© c·ªëc dinh d∆∞·ª°ng'
                ' v√† ƒë·ªì u·ªëng ƒë√≥ng chai v·ªõi c√°c th∆∞∆°ng hi·ªáu m·∫°nh nh∆∞: Omachi, Chinsu, Kokomi, Vinacafe, Wake-up, '
                'Tam Th√°i T·ª≠, Nam Ng∆∞, Wake-up 247. C√¥ng ty ƒë√£ s·ªü h·ªØu c√°c ng√†nh h√†ng chi·∫øm % th·ªã ph·∫ßn nh∆∞ sau: '
                'N∆∞·ªõc m·∫Øm 66%, n∆∞·ªõc t∆∞∆°ng 67%, m√¨ ƒÉn li·ªÅn 21%, t∆∞∆°ng ·ªõt 71% v√† c√† ph√™ h√≤a tan 35% t√≠nh ƒë·∫øn cu·ªëi nƒÉm 2017. '
                'C√¥ng ty ƒë√£ x√¢y d·ª±ng m·ªôt trong nh·ªØng h·ªá th·ªëng ph√¢n ph·ªëi th·ª±c ph·∫©m v√† ƒë·ªì u·ªëng l·ªõn nh·∫•t t·∫°i Vi·ªát Nam '
                'v·ªõi g·∫ßn 180.000 ƒëi·ªÉm b√°n l·∫ª s·∫£n ph·∫©m th·ª±c ph·∫©m, 160.000 ƒëi·ªÉm b√°n l·∫ª s·∫£n ph·∫©m ƒë·ªì u·ªëng, 3 trung t√¢m '
                'ph√¢n ph·ªëi t·∫°i Mi·ªÅn Nam, Mi·ªÅn Trung v√† Mi·ªÅn B·∫Øc. MCH ƒë∆∞·ª£c giao d·ªãch tr√™n th·ªã tr∆∞·ªùng UPCOM t·ª´ ƒë·∫ßu nƒÉm 2017.')
            st.subheader('S·∫£n ph·∫©m d·ªãch v·ª• ch√≠nh')
            st.write('S·∫£n xu·∫•t v√† kinh doanh c√°c lo·∫°i th·ª±c ph·∫©m v√† ƒë·ªì u·ªëng;')
            st.subheader('Chi·∫øn l∆∞·ª£c ph√°t tri·ªÉn v√† ƒë·∫ßu t∆∞')
            st.write('\n - Tr·ªü th√†nh C√¥ng ty h√†ng ti√™u d√πng d·∫´n ƒë·∫ßu Vi·ªát Nam x√©t v·ªÅ doanh s·ªë, l·ª£i nhu·∫≠n.'
                     '\n - M·ª•c ti√™u n·∫Øm gi·ªØ 70% th·ªã ph·∫ßn c√°c ng√†nh gia v·ªã v√† 35-40% th·ªã ph·∫ßn th·ª±c ph·∫©m ti·ªán d·ª•ng.'
                     '\n - T·ªëc ƒë·ªô ph√°t tri·ªÉn trung b√¨nh c·ªßa doanh thu trong giai ƒëo·∫°n 2020-2025 ƒë·∫°t tr√™n 20%/nƒÉm.'
                     '\n - T·∫≠p trung v√†o hai nh√≥m h√†ng ch√≠nh l√† gia v·ªã v√† m√¨ ƒÉn li·ªÅn.'
                     '\n - ƒê·∫©y m·∫°nh ng√†nh h√†ng ƒë·ªì u·ªëng nh·∫±m ƒë·∫°t ƒë∆∞·ª£c m·ª•c ti√™u doanh thu ph√¢n b·ªï theo t·ª∑ l·ªá 50% ƒë√≥ng g√≥p t·ª´ ƒë·ªì u·ªëng, 50% t·ª´ th·ª±c ph·∫©m v√†o nƒÉm 2025'
                     '\n - ƒê·∫©y m·∫°nh th·ªã ph·∫ßn d√≤ng trung c·∫•p v·ªõi nh√£n hi·ªáu n∆∞·ªõc m·∫Øm Nam Ng∆∞, n∆∞·ªõc t∆∞∆°ng Tam Th√°i T·ª≠ v√† m√¨ g√≥i Sagami, Kokomi, c√† ph√™ Wake-Up, Wake-Up 247;')
            st.subheader('R·ªßi ro kinh doanh')
            st.write(
                'Chi ti√™u tr√™n ƒë·∫ßu ng∆∞·ªùi ƒë·ªëi v·ªõi th·ª±c ph·∫©m v√† ƒë·ªì u·ªëng c·ªßa Vi·ªát Nam c√≤n th·∫•p so v·ªõi c√°c n∆∞·ªõc trong khu v·ª±c. Ng∆∞·ªùi ti√™u d√πng c√≥ xu h∆∞·ªõng ng√†y c√†ng th·∫Øt ch·∫∑t chi ti√™u. H·ªç th∆∞·ªùng ch·ªçn nh·ªØng s·∫£n ph·∫©m c√≥ gi√° c·∫£ h·ª£p l√Ω thay v√¨ ch·ªçn nh·ªØng s·∫£n ph·∫©m xa x·ªâ.')
        with co2:
            lanh_dao = company_officers(symbol=code, page_size=20, page=0)
            # B·ªè c·ªôt v√† ƒë·ªïi t√™n c·ªôt
            df_new = lanh_dao.drop(['ticker', 'officerPosition'], axis=1)
            df_new['officerOwnPercent'] = df_new['officerOwnPercent'] * 100  # Chuy·ªÉn ƒë·ªïi v·ªÅ ƒë∆°n v·ªã %
            # ƒê·ªïi t√™n c·ªôt
            y = df_new.rename(columns={'officerName': 'Ban l√£nh ƒë·∫°o', 'officerOwnPercent': 'T·ª∑ l·ªá CP (%)'})
            st.checkbox("Chi ti·∫øt", value=False, key="co2_checkbox")
            st.dataframe(y, use_container_width=st.session_state.co2_checkbox)

            cty_con = company_subsidiaries_listing(symbol=code, page_size=100, page=0)
            x = cty_con.rename(columns={'subCompanyName': 'C√¥ng ty con', 'subOwnPercent': 'T·ª∑ l·ªá (%) s·ªü h·ªØu'}).drop(
                'ticker',
                axis=1)
            x['T·ª∑ l·ªá (%) s·ªü h·ªØu'] = x['T·ª∑ l·ªá (%) s·ªü h·ªØu'] * 100
            st.checkbox("Chi ti·∫øt", value=False, key="co1_checkbox")
            st.dataframe(x, use_container_width=st.session_state.co1_checkbox)

    with t6:
        co_dong = company_large_shareholders(symbol=code)
        z = co_dong.rename(columns={'shareHolder': 'C·ªï ƒë√¥ng', 'shareOwnPercent': 'T·ª∑ l·ªá(%)'}).drop('ticker', axis=1)
        z['T·ª∑ l·ªá(%)'] = z['T·ª∑ l·ªá(%)'] * 100  # Chuy·ªÉn ƒë·ªïi v·ªÅ ƒë∆°n v·ªã %
        st.checkbox("Chi ti·∫øt", value=False, key="t5_checkbox")
        st.dataframe(z, use_container_width=st.session_state.t5_checkbox)
def preprocess_industry_data(industry_data):
    industry_data = industry_data.loc[["V·ªën h√≥a (t·ª∑)", "Gi√°", "P/E", "ROE", "P/B", "ROA"]]
    industry_data = industry_data.transpose().reset_index()
    industry_data.columns = ["M√£ CP", "V·ªën h√≥a (t·ª∑)", "Gi√°", "P/E", "ROE", "P/B", "ROA"]
    industry_data["ROE"] *= 100
    industry_data["ROA"] *= 100
    industry_data['V·ªën h√≥a (t·ª∑)'] = pd.to_numeric(industry_data['V·ªën h√≥a (t·ª∑)'], errors='coerce')
    return industry_data
def create_stock_evaluation_chart(df, metric, title):
    traces = [
        go.Scatter(
            x=df['fromDate'],
            y=df[metric],
            mode='lines',
            name=f'{metric} - {symbol}',
            hovertemplate='<b>%{x}</b><br>%{y}',
        )
        for metric, symbol in zip([metric, f'industry{metric}', f'vnindex{metric}'], ['C√¥ng ty', 'Ng√†nh', 'Th·ªã tr∆∞·ªùng'])
    ]

    layout = go.Layout(
        title=f'{title} c·ªßa C√¥ng ty, Ng√†nh v√† Th·ªã tr∆∞·ªùng',
        xaxis=dict(title='Th·ªùi Gian', rangeselector=dict(buttons=list([
            dict(count=1, label='1M', step='month', stepmode='backward'),
            dict(count=6, label='6M', step='month', stepmode='backward'),
            dict(count=1, label='YTD', step='year', stepmode='todate'),
            dict(count=1, label='1Y', step='year', stepmode='backward'),
            dict(step='all')
        ]))),
        yaxis=dict(title=metric),
        hovermode='x unified',
    )

    return go.Figure(data=traces, layout=layout)
def create_chart(df, value_col, chart_type='treemap', color_continuous_scale='RdBu', width=1000, height=600):
    df_filtered = df[df[value_col] != 0].dropna(subset=[value_col])

    if chart_type not in ['treemap', 'sunburst']:
        raise ValueError("Invalid chart_type. Please choose 'treemap' or 'sunburst'.")

    if chart_type == 'treemap':
        fig = px.treemap(
            df_filtered,
            path=['industryName.en', 'ticker'],
            values=value_col,
            color=value_col,
            color_continuous_scale=color_continuous_scale,
            title=f'Treemap - {value_col} ',
            labels=df_filtered['ticker'],
            custom_data=[df_filtered[value_col]]
        )
    elif chart_type == 'sunburst':
        fig = px.sunburst(
            df_filtered,
            path=['industryName.en', 'ticker'],
            values=value_col,
            color=value_col,
            color_continuous_scale=color_continuous_scale,
            title=f'Sunburst - {value_col} ',
            labels=df_filtered['ticker'],
            custom_data=[df_filtered[value_col]]
        )

    fig.update_layout(width=width, height=height)

    fig.update_layout(
        margin=dict(l=0, r=0, b=0, t=30) if chart_type == 'treemap' else dict(l=0, r=0, b=0, t=100),
        showlegend=False
    )

    fig.update_traces(
        hovertemplate='<b>%{label}</b><br>%{customdata:,.2f}',
        textinfo='label+value',
    )
    return fig
def calculate_rsi(data, window=14):
    delta = data.diff()
    up = delta.mask(delta < 0, 0)
    down = -delta.mask(delta > 0, 0)

    avg_gain = up.rolling(window).mean()
    avg_loss = down.rolling(window).mean()

    rs = avg_gain / avg_loss
    rsi = 100 - (100 / (1 + rs))
    return rsi
# T·∫°o h√†m ƒë·ªÉ v·∫Ω bi·ªÉu ƒë·ªì RSI
def plot_rsi_chart(data):
    fig = go.Figure()

    # T√≠nh to√°n v√† th√™m ƒë∆∞·ªùng RSI v√†o bi·ªÉu ƒë·ªì
    rsi = calculate_rsi(data['close'])
    fig.add_trace(go.Scatter(
        x=data['Date'],
        y=rsi,
        mode='lines',
        name='RSI',
        line=dict(color='purple', width=1)
    ))

    # Th√™m ƒë∆∞·ªùng ng∆∞·ª°ng b√°n (Y=80)
    fig.add_trace(go.Scatter(
        x=data['Date'],
        y=[80] * len(data),
        mode='lines',
        name='Overbought',
        line=dict(color='red', width=1, dash='dash')
    ))

    # Th√™m ƒë∆∞·ªùng ng∆∞·ª°ng mua (Y=20)
    fig.add_trace(go.Scatter(
        x=data['Date'],
        y=[20] * len(data),
        mode='lines',
        name='Oversold',
        line=dict(color='blue', width=1, dash='dash')
    ))

    # T√πy ch·ªânh bi·ªÉu ƒë·ªì
    fig.update_layout(
        title="RSI Chart",
        xaxis_title='Date',
        yaxis_title='RSI',
        showlegend=True,
        plot_bgcolor='white',
        hovermode='x unified'
    )

    # Th√™m thanh tr∆∞·ª£t th·ªùi gian v√† n√∫t ch·ªçn kho·∫£ng th·ªùi gian
    fig.update_xaxes(title_text='Date', rangeslider_visible=False, rangeselector=dict(
        buttons=[
            dict(count=1, label="1m", step="month", stepmode="backward"),
            dict(count=3, label="3m", step="month", stepmode="backward"),
            dict(count=6, label="6m", step="month", stepmode="backward"),
            dict(count=1, label="YTD", step="year", stepmode="todate"),
            dict(count=1, label="1y", step="year", stepmode="backward"),
            dict(count=5, label="5y", step="year", stepmode="backward"),
            dict(step="all")
        ]
    ))

    return fig
def plot_macd_chart(data):
    fig = go.Figure()

    # T√≠nh to√°n c√°c gi√° tr·ªã MACD
    data['ema_12'] = data['close'].ewm(span=12, adjust=False).mean()
    data['ema_26'] = data['close'].ewm(span=26, adjust=False).mean()
    data['macd'] = data['ema_12'] - data['ema_26']
    data['signal'] = data['macd'].ewm(span=9, adjust=False).mean()
    data['histogram'] = data['macd'] - data['signal']

    # ƒê∆∞·ªùng MACD
    fig.add_trace(go.Scatter(
        x=data['Date'],
        y=data['macd'],
        mode='lines',
        name='MACD',
        line=dict(color='blue', width=1)
    ))

    # ƒê∆∞·ªùng t√≠n hi·ªáu (signal)
    fig.add_trace(go.Scatter(
        x=data['Date'],
        y=data['signal'],
        mode='lines',
        name='Signal',
        line=dict(color='orange', width=1)
    ))

    # C·ªôt histogram
    fig.add_trace(go.Bar(
        x=data['Date'],
        y=data['histogram'],
        name='Histogram',
        marker=dict(
            color=data['histogram'],
            colorscale=[[0, 'red'], [0.5, 'red'], [0.5, 'green'], [1, 'green']],
            cmin=-max(abs(data['histogram'])),
            cmax=max(abs(data['histogram'])),
            showscale=False
        )
    ))

    # T√πy ch·ªânh bi·ªÉu ƒë·ªì
    fig.update_layout(
        title="MACD Chart",
        xaxis_title='Date',
        yaxis_title='MACD',
        showlegend=True, plot_bgcolor='white', hovermode='x unified',
    )

    # Th√™m thanh tr∆∞·ª£t th·ªùi gian v√† n√∫t ch·ªçn kho·∫£ng th·ªùi gian
    fig.update_xaxes(title_text='Date', rangeslider_visible=False, rangeselector=dict(
        buttons=[
            dict(count=1, label="1m", step="month", stepmode="backward"),
            dict(count=3, label="3m", step="month", stepmode="backward"),
            dict(count=6, label="6m", step="month", stepmode="backward"),
            dict(count=1, label="YTD", step="year", stepmode="todate"),
            dict(count=1, label="1y", step="year", stepmode="backward"),
            dict(count=5, label="5y", step="year", stepmode="backward"),
            dict(step="all")
        ]
    ))

    # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì trong Streamlit
    st.plotly_chart(fig)
def add_trace(fig, x, y, name, color, width=1.5, mode='lines'):
    fig.add_trace(go.Scatter(x=x, y=y, mode=mode, name=name, line=dict(color=color, width=width)))
def plot_sma(fig, df, windows, color):
    for window in windows:
        df[f'sma_{window}'] = ta.trend.sma_indicator(df['close'], window=int(window))
        add_trace(fig, df['Date'], df[f'sma_{window}'], f"SMA ({window})", color)
def plot_ema(fig, df, windows, color):
    for window in windows:
        df[f'ema_{window}'] = ta.trend.ema_indicator(df['close'], window=int(window))
        add_trace(fig, df['Date'], df[f'ema_{window}'], f"EMA ({window})", color)
def plot_bollinger(fig, df):
    df['bollinger_hband'] = ta.volatility.bollinger_hband(df['close'], window=20, window_dev=2)
    df['bollinger_lband'] = ta.volatility.bollinger_lband(df['close'], window=20, window_dev=2)
    add_trace(fig, df['Date'], df['bollinger_hband'], 'Bollinger High', 'red', width=1)
    add_trace(fig, df['Date'], df['bollinger_lband'], 'Bollinger Low', 'green', width=1)
def radar_chart(df, title, color_sequence):
    # Melt DataFrame to have a 'criteria' column
    df_melted = pd.melt(df, id_vars=['M√£'],
                        value_vars=df.columns[1:])

    # Create Radar Chart with Plotly Express
    fig = px.line_polar(df_melted, r='value', theta='variable', line_close=True, color='M√£',
                        labels={'variable': 'Ti√™u ch√≠', 'value': 'ƒêi·ªÉm'},
                        title=title,
                        height=400, width=700,
                        color_discrete_sequence=color_sequence)

    # Customizing Radar Chart with Plotly Graph Objects
    fig.update_traces(fill='toself', hoverinfo='all', hovertemplate='%{r:.2f}', fillcolor='rgba(0, 200, 0, 0.5)')

    # Add highlighting at all highest points
    max_indices = df_melted.loc[df_melted.groupby('variable')['value'].idxmax()]
    for idx, row in max_indices.iterrows():
        fig.add_trace(go.Scatterpolar(
            r=[row['value']],
            theta=[row['variable']],
            mode='markers',
            marker=dict(color='orange', size=6),
            showlegend=False
        ))

    # Show the chart
    fig.update_layout(polar=dict(radialaxis=dict(visible=True, range=[0, 5])), showlegend=False)
    return fig
def display_radar_chart(df, title, color_sequence):
    st.plotly_chart(radar_chart(df, title, color_sequence))
#OK
def plot_accounting_balance(df):
    # Your plotting logic here
    colors = ['rgb(200,50, 50)', 'rgb(50, 200,10)', 'rgb(10, 60, 200)']
    # T·∫°o d·ªØ li·ªáu cho c√°c c·ªôt nh√≥m v·ªõi m√†u pastel
    data = [
        go.Bar(
            name='T·ªïng t√†i s·∫£n',
            x=df['NƒÉm'],
            y=df['CƒêKT. T·ªîNG C·ªòNG T√ÄI S·∫¢N'],
            marker_color=colors[0]
        ),
        go.Bar(
            name='V·ªën ch·ªß s·ªü h·ªØu',
            x=df['NƒÉm'],
            y=df['CƒêKT. V·ªêN CH·ª¶ S·ªû H·ªÆU'],
            marker_color=colors[2]
        )]
    layout = go.Layout(
        title='C√ÇN ƒê·ªêI K·∫æ TO√ÅN',
        xaxis=dict(title='Gi√° tr·ªã (ƒë·ªìng)'),
        yaxis=dict(title='NƒÉm'),
        barmode='group'
    )
    # T·∫°o ƒë·ªëi t∆∞·ª£ng Figure v√† th√™m d·ªØ li·ªáu v√† layout v√†o
    fig = go.Figure(data=data, layout=layout)

    return fig#OK
#OK
def plot_business_results(df):
    # T·∫°o b·∫£ng m√†u pastel
    colors = ['rgb(250,50, 50)', 'rgb(0, 200,0)']

    # T·∫°o d·ªØ li·ªáu cho c√°c c·ªôt nh√≥m v·ªõi m√†u pastel
    data = [
        go.Bar(
            name='Doanh thu thu·∫ßn',
            x=df['NƒÉm'],
            y=df['KQKD. Doanh thu thu·∫ßn'],
            marker_color=colors[0]
        ),
        go.Bar(
            name='L·ª£i nhu·∫≠n sau thu·∫ø',
            x=df['NƒÉm'],
            y=df['KQKD. L·ª£i nhu·∫≠n sau thu·∫ø thu nh·∫≠p doanh nghi·ªáp'],
            marker_color=colors[1]
        )
    ]
    layout = go.Layout(
            title='K·∫øt qu·∫£ kinh doanh',
            xaxis=dict(title='Gi√° tr·ªã (ƒë·ªìng)'),
            yaxis=dict(title='NƒÉm'),
            barmode='group'
        )
    # T·∫°o ƒë·ªëi t∆∞·ª£ng Figure v√† th√™m d·ªØ li·ªáu v√† layout v√†o
    fig = go.Figure(data=data, layout=layout)

    return fig#OK
#OK
def plot_cash_flow(df):
    # T·∫°o b·∫£ng m√†u pastel
    colors = ['rgb(250,50, 50)', 'rgb(0, 200,0)', 'rgb(50, 50, 255)']

    # T·∫°o d·ªØ li·ªáu cho c√°c c·ªôt nh√≥m v·ªõi m√†u pastel
    data = [
        go.Bar(
            name='LCTT t·ª´ ho·∫°t ƒë·ªông t√†i ch√≠nh',
            x=df['NƒÉm'],
            y=df['LCTT. L∆∞u chuy·ªÉn ti·ªÅn t·ªá t·ª´ ho·∫°t ƒë·ªông t√†i ch√≠nh (TT)'],
            marker_color=colors[0]
        ),
        go.Bar(
            name='LCTT t·ª´ ho·∫°t ƒë·ªông kinh doanh',
            x=df['NƒÉm'],
            y=df['LCTT. L∆∞u chuy·ªÉn ti·ªÅn t·ªá r√≤ng t·ª´ c√°c ho·∫°t ƒë·ªông s·∫£n xu·∫•t kinh doanh (TT)'],
            marker_color=colors[1]
        ),
        go.Bar(
            name='LCTT t·ª´ ho·∫°t ƒë·ªông ƒë·∫ßu t∆∞',
            x=df['NƒÉm'],
            y=df['LCTT. L∆∞u chuy·ªÉn ti·ªÅn t·ªá r√≤ng t·ª´ ho·∫°t ƒë·ªông ƒë·∫ßu t∆∞ (TT)'],
            marker_color=colors[2]
        )
    ]
    layout = go.Layout(
            title='D√íNG TI·ªÄN',
            xaxis=dict(title='Gi√° tr·ªã (ƒë·ªìng)'),
            yaxis=dict(title='NƒÉm'),
            barmode='group')
    # T·∫°o ƒë·ªëi t∆∞·ª£ng Figure v√† th√™m d·ªØ li·ªáu v√† layout v√†o
    fig = go.Figure(data=data, layout=layout)

    return fig


def plot_capital_structure(df_cdkto):
    df_melted = pd.melt(df_cdkto, id_vars=['NƒÉm'], value_vars=[
        'CƒêKT. N·ª¢ PH·∫¢I TR·∫¢', 'CƒêKT. N·ª£ ng·∫Øn h·∫°n',
       'CƒêKT. Ph·∫£i tr·∫£ ng∆∞·ªùi b√°n ng·∫Øn h·∫°n',
       'CƒêKT. Ng∆∞·ªùi mua tr·∫£ ti·ªÅn tr∆∞·ªõc ng·∫Øn h·∫°n',
       'CƒêKT. Doanh thu ch∆∞a th·ª±c hi·ªán ng·∫Øn h·∫°n',
       'CƒêKT. Vay v√† n·ª£ thu√™ t√†i ch√≠nh ng·∫Øn h·∫°n', 'CƒêKT. N·ª£ d√†i h·∫°n',
       'CƒêKT. Ph·∫£i tr·∫£ nh√† cung c·∫•p d√†i h·∫°n',
       'CƒêKT. Ng∆∞·ªùi mua tr·∫£ ti·ªÅn tr∆∞·ªõc d√†i h·∫°n',
       'CƒêKT.Doanh thu ch∆∞a th·ª±c hi√™n d√†i h·∫°n',
       'CƒêKT. Vay v√† n·ª£ thu√™ t√†i ch√≠nh d√†i h·∫°n', 'CƒêKT. V·ªêN CH·ª¶ S·ªû H·ªÆU',
       'CƒêKT. V·ªën v√† c√°c qu·ªπ', 'CƒêKT. V·ªën g√≥p c·ªßa ch·ªß s·ªü h·ªØu',
       'CƒêKT. Th·∫∑ng d∆∞ v·ªën c·ªï ph·∫ßn', 'CƒêKT.V·ªën kh√°c',
       'CƒêKT. L√£i ch∆∞a ph√¢n ph·ªëi',
       'CƒêKT. LNST ch∆∞a ph√¢n ph·ªëi l≈©y k·∫ø ƒë·∫øn cu·ªëi k·ª≥ tr∆∞·ªõc',
       'CƒêKT. LNST ch∆∞a ph√¢n ph·ªëi k·ª≥ n√†y',
       'CƒêKT. L·ª£i √≠ch c·ªï ƒë√¥ng kh√¥ng ki·ªÉm so√°t',
       'CƒêKT. Ngu·ªìn kinh ph√≠ v√† qu·ªπ kh√°c',
       'CƒêKT. L·ª¢I √çCH C·ª¶A C·ªî ƒê√îNG KH√îNG KI·ªÇM SO√ÅT (tr∆∞·ªõc 2015)',
       'CƒêKT. T·ªîNG C·ªòNG NGU·ªíN V·ªêN']
                        , var_name='Lo·∫°i', value_name='Gi√° tr·ªã')
    df_cdkto['T·ª∑ s·ªë N·ª£ vay tr√™n T·ªïng t√†i s·∫£n'] = (df_cdkto['CƒêKT. Vay v√† n·ª£ thu√™ t√†i ch√≠nh ng·∫Øn h·∫°n'] + df_cdkto['CƒêKT. Vay v√† n·ª£ thu√™ t√†i ch√≠nh d√†i h·∫°n']) / df_cdkto['CƒêKT. T·ªîNG C·ªòNG T√ÄI S·∫¢N']
    # S·∫Øp x·∫øp l·∫°i d·ªØ li·ªáu theo nƒÉm
    df_melted.sort_values(by='NƒÉm', inplace=True)

    # S·ª≠ d·ª•ng plotly.graph_objects ƒë·ªÉ v·∫Ω bi·ªÉu ƒë·ªì c·ªôt ƒë√¥i
    fig = go.Figure()

    for i, loai in enumerate(df_melted['Lo·∫°i'].unique()):
        fig.add_trace(go.Bar(
            x=df_melted[df_melted['Lo·∫°i'] == loai]['NƒÉm'],
            y=df_melted[df_melted['Lo·∫°i'] == loai]['Gi√° tr·ªã'],
            name=loai
        ))
    fig.add_trace(go.Scatter(x=df_cdkto['NƒÉm'], y=df_cdkto['T·ª∑ s·ªë N·ª£ vay tr√™n T·ªïng t√†i s·∫£n'], mode='lines+markers',
                             name='T·ªâ l·ªá N·ª£ vay/TTS', yaxis='y2'))
    fig.update_layout(yaxis2=dict(anchor='x', overlaying='y', side='right'))

    # C·∫•u h√¨nh tr·ª±c quan cho bi·ªÉu ƒë·ªì
    fig.update_layout(
        barmode='group',
        xaxis_tickmode='linear',
        xaxis_title='NƒÉm',
        yaxis_title='Gi√° tr·ªã (t·ª∑ ƒë·ªìng)',
        title='C∆° C·∫•u Ngu·ªìn v·ªën',
        updatemenus=[
            dict(
                active=0,
                buttons=list([
                    dict(label='TƒÉng', method='relayout', args=['barmode', 'stack']),
                    dict(label='TƒÉng c∆∞·ªùng', method='relayout', args=['barmode', 'group'])
                ]),
                direction='down',
                showactive=True,
                x=1.05,
                xanchor='left',
                y=1.2,
                yanchor='top'
            )
        ]
    )

    return fig

def plot_asset_structure(df_cdkto):
    df_cdkto['Ti·ªÅn/TTS'] = df_cdkto['CƒêKT. T√ÄI S·∫¢N NG·∫ÆN H·∫†N'] / df_cdkto['CƒêKT. T·ªîNG C·ªòNG T√ÄI S·∫¢N']
    # Melt DataFrame ƒë·ªÉ c√≥ th·ªÉ s·ª≠ d·ª•ng bi·ªÉu ƒë·ªì c·ªôt ƒë√¥i
    df_melted = pd.melt(df_cdkto, id_vars=['NƒÉm'], value_vars=[
        'CƒêKT. T√ÄI S·∫¢N NG·∫ÆN H·∫†N', 'CƒêKT. Ti·ªÅn v√† t∆∞∆°ng ƒë∆∞∆°ng ti·ªÅn ',
        'CƒêKT. ƒê·∫ßu t∆∞ t√†i ch√≠nh ng·∫Øn h·∫°n', 'CƒêKT. C√°c kho·∫£n ph·∫£i thu ng·∫Øn h·∫°n',
        'CƒêKT. H√†ng t·ªìn kho, r√≤ng', 'CƒêKT. T√†i s·∫£n ng·∫Øn h·∫°n kh√°c',
        'CƒêKT. T√ÄI S·∫¢N D√ÄI H·∫†N', 'CƒêKT. Ph·∫£i thu d√†i h·∫°n',
        'CƒêKT. T√†i s·∫£n c·ªë ƒë·ªãnh', 'CƒêKT. GTCL TSCƒê h·ªØu h√¨nh',
        'CƒêKT. GTCL T√†i s·∫£n thu√™ t√†i ch√≠nh',
        'CƒêKT. GTCL t√†i s·∫£n c·ªë ƒë·ªãnh v√¥ h√¨nh',
        'CƒêKT. X√¢y d·ª±ng c∆° b·∫£n d·ªü dang (tr∆∞·ªõc 2015)',
        'CƒêKT. Gi√° tr·ªã r√≤ng t√†i s·∫£n ƒë·∫ßu t∆∞', 'CƒêKT. T√†i s·∫£n d·ªü dang d√†i h·∫°n',
        'CƒêKT. ƒê·∫ßu t∆∞ d√†i h·∫°n', 'CƒêKT. L·ª£i th·∫ø th∆∞∆°ng m·∫°i (tr∆∞·ªõc 2015)',
        'CƒêKT. T√†i s·∫£n d√†i h·∫°n kh√°c', 'CƒêKT.L·ª£i th·∫ø th∆∞∆°ng m·∫°i',
        'CƒêKT. T·ªîNG C·ªòNG T√ÄI S·∫¢N']
                        , var_name='Lo·∫°i', value_name='Gi√° tr·ªã')

    # S·∫Øp x·∫øp l·∫°i d·ªØ li·ªáu theo nƒÉm
    df_melted.sort_values(by='NƒÉm', inplace=True)

    # S·ª≠ d·ª•ng plotly.graph_objects ƒë·ªÉ v·∫Ω bi·ªÉu ƒë·ªì c·ªôt ƒë√¥i
    fig = go.Figure()

    for i, loai in enumerate(df_melted['Lo·∫°i'].unique()):
        fig.add_trace(go.Bar(
            x=df_melted[df_melted['Lo·∫°i'] == loai]['NƒÉm'],
            y=df_melted[df_melted['Lo·∫°i'] == loai]['Gi√° tr·ªã'],
            name=loai
        ))
    fig.add_trace(go.Scatter(
        x=df_cdkto['NƒÉm'],
        y=df_cdkto['Ti·ªÅn/TTS'],
        mode='lines+markers',
        name='Ti·ªÅn/TTS', yaxis='y2'))
    fig.update_layout(yaxis2=dict(anchor='x', overlaying='y', side='right'))

    # C·∫•u h√¨nh tr·ª±c quan cho bi·ªÉu ƒë·ªì
    fig.update_layout(
        barmode='group',
        xaxis_tickmode='linear',
        xaxis_title='NƒÉm',
        yaxis_title='Gi√° tr·ªã (t·ª∑ ƒë·ªìng)',
        title='C∆° C·∫•u T√†i S·∫£n',
        updatemenus=[
            dict(
                active=0,
                buttons=list([
                    dict(label='TƒÉng', method='relayout', args=['barmode', 'stack']),
                    dict(label='TƒÉng c∆∞·ªùng', method='relayout', args=['barmode', 'group'])
                ]),
                direction='down',
                showactive=True,
                x=1.05,
                xanchor='left',
                y=1.2,
                yanchor='top'
            )
        ]
    )

    return fig
def plot_gross_profit_margin(data):
    data['Bi√™n l·ª£i nhu·∫≠n g·ªôp'] = data['KQKD. L·ª£i nhu·∫≠n g·ªôp v·ªÅ b√°n h√†ng v√† cung c·∫•p d·ªãch v·ª•']/data['KQKD. Doanh thu thu·∫ßn']
    # T·∫°o bi·ªÉu ƒë·ªì c·ªôt cho Doanh thu thu·∫ßn v√† L·ª£i nhu·∫≠n g·ªôp
    fig = go.Figure()

    # Bi·ªÉu ƒë·ªì c·ªôt cho Doanh thu thu·∫ßn
    fig.add_trace(go.Bar(
        x=data['NƒÉm'],
        y=data['KQKD. Doanh thu thu·∫ßn'],
        name='Doanh thu thu·∫ßn',
        marker=dict(color='rgb(180, 235, 253)')
    ))

    # Bi·ªÉu ƒë·ªì c·ªôt cho L·ª£i nhu·∫≠n g·ªôp
    fig.add_trace(go.Bar(
        x=data['NƒÉm'],
        y=data['KQKD. L·ª£i nhu·∫≠n g·ªôp v·ªÅ b√°n h√†ng v√† cung c·∫•p d·ªãch v·ª•'],
        name='L·ª£i nhu·∫≠n g·ªôp',
        marker=dict(color='rgb(255, 204, 204)')
    ))

    # Bi·ªÉu ƒë·ªì ƒë∆∞·ªùng cho Bi√™n l·ª£i nhu·∫≠n g·ªôp
    fig.add_trace(go.Scatter(
        x=data['NƒÉm'],
        y=data['Bi√™n l·ª£i nhu·∫≠n g·ªôp'],
        name='Bi√™n l·ª£i nhu·∫≠n g·ªôp',
        mode='lines+markers',
        yaxis='y2',
        line=dict(color='rgb(50, 171, 96)')
    ))

    # C·∫≠p nh·∫≠t layout c·ªßa bi·ªÉu ƒë·ªì
    fig.update_layout(
        title='Doanh thu v√† L·ª£i nhu·∫≠n g·ªôp',
        xaxis=dict(title='NƒÉm'),
        yaxis=dict(title='S·ªë ti·ªÅn (t·ª∑ ƒë·ªìng)'),
        yaxis2=dict(
            title='Bi√™n l·ª£i nhu·∫≠n g·ªôp (%)',
            overlaying='y',
            side='right',
            showgrid=False
        )
    )

    return fig


def plot_profit_structure(data):
    # T·∫°o bi·ªÉu ƒë·ªì c·ªôt
    fig = go.Figure()

    # Th√™m c√°c c·ªôt v√†o bi·ªÉu ƒë·ªì
    fig.add_trace(go.Bar(
        x=data['NƒÉm'],
        y=data['KQKD. L·ª£i nhu·∫≠n g·ªôp v·ªÅ b√°n h√†ng v√† cung c·∫•p d·ªãch v·ª•'],
        name='L·ª£i nhu·∫≠n g·ªôp',
        marker=dict(color='rgb(180, 235, 253)')
    ))

    fig.add_trace(go.Bar(
        x=data['NƒÉm'],
        y=data['KQKD. Doanh thu ho·∫°t ƒë·ªông t√†i ch√≠nh'],
        name='L·ª£i nhu·∫≠n t·ª´ ho·∫°t ƒë·ªông t√†i ch√≠nh',
        marker=dict(color='rgb(255, 204, 204)')
    ))

    fig.add_trace(go.Bar(
        x=data['NƒÉm'],
        y=data['KQKD. L·ª£i nhu·∫≠n kh√°c'],
        name='L·ª£i nhu·∫≠n kh√°c',
        marker=dict(color='rgb(204, 255, 204)')
    ))

    fig.add_trace(go.Bar(
        x=data['NƒÉm'],
        y=data['KQKD. L·ª£i nhu·∫≠n sau thu·∫ø thu nh·∫≠p doanh nghi·ªáp'],
        name='L·ª£i nhu·∫≠n sau thu·∫ø',
        marker=dict(color='rgb(255, 255, 204)')
    ))

    # C·∫≠p nh·∫≠t layout c·ªßa bi·ªÉu ƒë·ªì
    fig.update_layout(
        title='C∆† C·∫§U L·ª¢I NHU·∫¨N',
        xaxis=dict(title='NƒÉm'),
        yaxis=dict(title='L·ª£i nhu·∫≠n (t·ª∑ ƒë·ªìng)'),
        yaxis2=dict(title='TƒÉng tr∆∞·ªüng (%)', overlaying='y', side='right')
    )

    return fig


#3CAI N√ÄY OK H·∫æT
def plot_profit_after_tax(df):
    # T·∫°o bi·ªÉu ƒë·ªì t∆∞∆°ng t√°c
    fig = go.Figure()

    # L·∫∑p qua t·ª´ng c·ªï phi·∫øu v√† th√™m ƒë∆∞·ªùng t∆∞·ª£ng tr∆∞ng cho m·ªói c·ªï phi·∫øu
    for ma, data in df.groupby('M√É'):
        fig.add_trace(go.Scatter(x=data['YEAR'], y=data['KQKD. L·ª¢I NHU·∫¨N SAU THU·∫æ THU NH·∫¨P DOANH NGHI·ªÜP'],
                                 mode='lines+markers', name=ma,
                                 marker=dict(size=8),
                                 hovertemplate='NƒÉm: %{x}<br>L·ª£i nhu·∫≠n sau thu·∫ø: %{y:.2f} t·ª∑ ƒë·ªìng'))

    # C·∫≠p nh·∫≠t layout cho bi·ªÉu ƒë·ªì
    fig.update_layout(title='SO S√ÅNH L·ª¢I NHU·∫¨N SAU THU·∫æ', xaxis=dict(title='NƒÉm', tickmode='linear', tickformat='%Y'),
                      yaxis=dict(title='L·ª£i nhu·∫≠n sau thu·∫ø'))
    # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì
    return fig
def plot_equity(df):
    # T·∫°o bi·ªÉu ƒë·ªì t∆∞∆°ng t√°c
    fig = go.Figure()

    # L·∫∑p qua t·ª´ng c·ªï phi·∫øu v√† th√™m ƒë∆∞·ªùng t∆∞·ª£ng tr∆∞ng cho m·ªói c·ªï phi·∫øu
    for ma, data in df.groupby('M√É'):
        fig.add_trace(go.Scatter(x=data['YEAR'], y=data['CƒêKT. V·ªêN CH·ª¶ S·ªû H·ªÆU'], mode='lines+markers', name=ma,
                                 marker=dict(size=8),
                                 hovertemplate='NƒÉm: %{x}<br>V·ªën ch·ªß s·ªü h·ªØu: %{y:.2f} t·ª∑ ƒë·ªìng'))

    # C·∫≠p nh·∫≠t layout cho bi·ªÉu ƒë·ªì
    fig.update_layout(title='SO S√ÅNH V·ªêN CH·ª¶ S·ªû H·ªÆU', xaxis=dict(title='NƒÉm', tickmode='linear', tickformat='%Y'),
                      yaxis=dict(title='V·ªën ch·ªß s·ªü h·ªØu'))

    # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì tr√™n Streamlit
    return fig
def plot_revenue_comparison(dataframe):
    # T·∫°o bi·ªÉu ƒë·ªì t∆∞∆°ng t√°c
    fig = go.Figure()
    # L·∫∑p qua t·ª´ng c·ªï phi·∫øu v√† th√™m ƒë∆∞·ªùng t∆∞·ª£ng tr∆∞ng cho m·ªói c·ªï phi·∫øu
    for ma, data in dataframe.groupby('M√É'):
        fig.add_trace(go.Bar(
            x=data['YEAR'],
            y=data['KQKD. DOANH THU THU·∫¶N'],
            name=ma,
            hovertemplate='NƒÉm: %{x}<br>Doanh thu thu·∫ßn: %{y:.2f} t·ª∑ ƒë·ªìng'
        ))

    # C·∫≠p nh·∫≠t layout c·ªßa bi·ªÉu ƒë·ªì
    fig.update_layout(
        title='So s√°nh Doanh thu thu·∫ßn c·ªßa c√°c c·ªï phi·∫øu trong ng√†nh x√¢y d·ª±ng',
        xaxis=dict(title='NƒÉm'),
        yaxis=dict(title='Doanh thu thu·∫ßn'),
        barmode='group',
        legend=dict(orientation='h', yanchor='top', y=-0.15)
    )

    # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì
    return fig

if __name__ == "__main__":
    main()

